"""From Jupyter Notebook"""



{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Generate Handwritten digit images form MNIST Dataset using GAN\n",
        "\n",
        "Generative Adversarial Model is a form of unsupervised machine learning  algorithm. It has two models - Generator and Discriminator, where a generator tries to generate new data and the discriminator tries to classify the data as either real or fake. Based on the discriminators loss, generator tries to adjust weights on its layers and creates new data to increase the dicriinator loss. \n"
      ],
      "metadata": {
        "id": "8ZKFj4JtVYyt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import the necessary libraries and load the data\n",
        "\n",
        "We import the necessary libraries:\n",
        "* **numpy** - the numerical computing library to provide mathematical operations on arrays \\\n",
        "* **keras** - high level neural network API for training the deep learning models \\\n",
        "* **tensorflow** - open-source library for mchine learning and deep learning \\\n",
        "\n",
        "\n",
        "**MNIST** is a well known dataset for handwritten digitd which we use to train our model to generate new handwritten digit images. "
      ],
      "metadata": {
        "id": "zs6S-8NWXP57"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yJVO8iezZoDC"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import keras\n",
        "import keras.backend as K\n",
        "from keras.layers import Input, Dense, Activation, LeakyReLU, BatchNormalization\n",
        "from keras.models import Sequential\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U2pzig2oZw2w",
        "outputId": "a2c65b24-7373-4857-9680-231f54ba1701"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# GAN design\n",
        "GANs are a structured probabilistic model which consists of 2 adversarial networks - a generator network G and a discriminator network D. \\\n",
        "**Generative model (G)** – It is a de-convolutional neural network, which captures the data distribution and represents a probability distribution pmodel(x). The generator takes in observed variables x from the given dataset and noise vectors z(latent variables) sampled from pz and generates images. The generated synthetic images are blended with the true images from a dataset and fed into the discriminator.   \\\n",
        "For the generator, it has to generate a 28*28 pixels grayscale fake images from random noise. It will accept a 1-D array and output an image. This can be achieved using a simple feedforward neural network of hidden layers, which reshapes the 1-D array to a 2-D array by up-sampling it using convolutional LeakyReLU layers, batch normalization, and activation functions. \\\n",
        "Input layer: The input layer of the generator takes a random noise vector as input which is drawn from a simple distribution. The size of the noise vector depends on size of the latent space, we have used 100-dimensional.\\\n",
        "We add layers on top of it to increase the spatial resolution to (28, 28) to match the size of the MNIST images. We add one or more convolutional layers to refine the features and generate the final image. To stabilize the training process, batch normalization layers are added after each convolutional layer. These layers help to normalize the activations and reduce the covariate shift, making the training process more stable. Finally, activation functions, leaky ReLU has be added after each convolutional layer to introduce non-linearity into the model. \\\n",
        "The final layer of the generator is the output layer, which produces the generated image. The activations from the final layer can be passed through a sigmoid activation function to produce values between 0 and 1, which can be interpreted as pixel values. \\\n",
        "\n",
        "\n",
        "**Discriminative model (D)** – It is a convolutional neural network that estimates the probability that a sample came from the training data(real) rather than generative model G(fake). \\\n",
        "It has been created as a simple fully connected neural network with one hidden layer with the leaky ReLU activation. It takes the images as input and we down-sample it using convolutional LeakyReLU layers, dense layers, and activation functions. The activation function we use is a sigmoid as we want to output the probability of the input being a real opr a fake image. \\\n",
        "I have used the Adam optimizer for the discriminator optimiser. \\\n",
        "\n",
        "The gan is basically a generaotor and a discriminator layers added sequentially.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ySMQumxRkcZp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "owmZSiiHaYde"
      },
      "outputs": [],
      "source": [
        "def make_simple_GAN(sample_size, \n",
        "                    g_hidden_size, \n",
        "                    d_hidden_size, \n",
        "                    leaky_alpha, \n",
        "                    g_learning_rate,\n",
        "                    d_learning_rate):\n",
        "    K.clear_session()\n",
        "    \n",
        "    img_rows = 28\n",
        "    img_cols = 28\n",
        "    channels = 1\n",
        "    img_shape = (img_rows, img_cols, channels)\n",
        "    latent_dim = 100\n",
        "\n",
        "    generator = Sequential([\n",
        "        Dense(g_hidden_size, input_shape=(sample_size,)),\n",
        "        LeakyReLU(alpha=leaky_alpha),\n",
        "        BatchNormalization(momentum=0.8),\n",
        "        Dense(512),\n",
        "        LeakyReLU(alpha=leaky_alpha),\n",
        "        BatchNormalization(momentum=0.8),\n",
        "        Dense(1024),\n",
        "        LeakyReLU(alpha=leaky_alpha),\n",
        "        BatchNormalization(momentum=0.8),\n",
        "        Dense(np.prod(img_shape)),\n",
        "        Activation('tanh')\n",
        "    ], name='generator')   \n",
        "\n",
        "    discriminator = Sequential([\n",
        "        Dense(d_hidden_size, input_shape=(784,)),\n",
        "        LeakyReLU(alpha=leaky_alpha),\n",
        "        Dense(256),\n",
        "        LeakyReLU(alpha=leaky_alpha),\n",
        "        Dense(1),\n",
        "        Activation('sigmoid')\n",
        "    ], name='discriminator')    \n",
        "    \n",
        "    gan = Sequential([\n",
        "        generator,\n",
        "        discriminator\n",
        "    ])\n",
        "    \n",
        "    discriminator.compile(optimizer=Adam(lr=d_learning_rate), loss='binary_crossentropy')\n",
        "    gan.compile(optimizer=Adam(lr=g_learning_rate), loss='binary_crossentropy')\n",
        "    \n",
        "    return gan, generator, discriminator"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tQ_Mf82ksL2e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Make the discriminator trainable\n",
        "\n",
        "We need to have an option to make the discriminator layers trainable and non-trainable when needed. When we train the discriminator, we want the discriminator to change its weights thus want it to be trainable. \\\n",
        "When we train the GAN, the back-propogation should allow the generator to change its weight. We do not want the discriminator to not change it's weight during this time and thus make it non-trainable."
      ],
      "metadata": {
        "id": "TJ7Z6B4HmZ51"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q6xOQ3XCaSO2"
      },
      "outputs": [],
      "source": [
        "def make_trainable(model, trainable):\n",
        "    for layer in model.layers:\n",
        "        layer.trainable = trainable"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Noise/Latent  variables\n",
        "\n",
        "Typically, noise is drawn from a Gaussian or uniform distribution because many complicated systems can be modelled successfully as normally distributed noise. We have used normal distribution as it encodes the maximum amount of uncertainty over the real numbers thus inserting the least amount of prior knowledge into a model. \\\n",
        "The latent space in a GAN is a continuous space that can be sampled to generate new data by learning the underlying probability distribution of the training data.\n"
      ],
      "metadata": {
        "id": "sc13C4_hnLDw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DRsBefmoaD7_"
      },
      "outputs": [],
      "source": [
        "def make_latent_samples(n_samples, sample_size):\n",
        "    return np.random.normal(loc=0, scale=1, size=(n_samples, sample_size))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Preprocessing and Deprocessing of data\n",
        "\n",
        "The MNIST dataset contains pixel values which are stored as 8-bit integers, with values ranging from 0 to 255. This can cause issues during training, as neural networks typically work best with data that is centered around zero and has a small variance. When the pixel values are not scaled, the network may struggle to learn the underlying patterns in the data, as the large range of values can cause the gradients to become unstable. \\\n",
        "To address this, we rescale the MNIST dataset between -1 and 1. This rescaling step helps to standardize the data, making it easier for the network to learn the underlying patterns in the data. Additionally, training with rescaled data can be faster and more stable, as the network can converge more quickly and with fewer issues related to unstable gradients. \\\n",
        "Similarly, deprocessing is the opposite process of preprocess to be able to view the images.\n"
      ],
      "metadata": {
        "id": "iCA0QrQBoMEJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZFMcDWrHabXu"
      },
      "outputs": [],
      "source": [
        "def preprocess(x):    \n",
        "    x = x.reshape(-1, 784) # 784=28*28\n",
        "    x = np.float64(x)\n",
        "    x = (x / 255 - 0.5) * 2\n",
        "    x = np.clip(x, -1, 1)\n",
        "    return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oiWeSqEPagWf"
      },
      "outputs": [],
      "source": [
        "def deprocess(x):\n",
        "    x = (x / 2 + 1) * 255\n",
        "    x = np.clip(x, 0, 255)\n",
        "    x = np.uint8(x)\n",
        "    x = x.reshape(28, 28)\n",
        "    return x"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Labels for real and fake data\n",
        "We make label = 1 for the real data and label = 0 for the fake data and append it to our dataset. This is used to identify how many images were identified correctly as real or fake by the discriinator, thus calculating the generator and discriminator loss.\n"
      ],
      "metadata": {
        "id": "6WrV4m9iopdo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mjw84NH1aih6"
      },
      "outputs": [],
      "source": [
        "def make_labels(size):\n",
        "    return np.ones([size, 1]), np.zeros([size, 1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2nyT-jQBadrg"
      },
      "outputs": [],
      "source": [
        "X_train_real = preprocess(X_train)\n",
        "X_test_real  = preprocess(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l82Rvm6vak63"
      },
      "outputs": [],
      "source": [
        "y_real_10, y_fake_10 = make_labels(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train the model\n",
        "\n",
        "Next, we setup all the hyperparaeters for our model including the number of epochs, the batch size and different learning rates. \\\n",
        "We create the GAN, generator and discriminator for using these hyperparameters and run the model for the number of epochs. \\\n",
        "We train the discriminator and then train the generator via GAN.\n"
      ],
      "metadata": {
        "id": "bppbyXzipvWR"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cPnnEzZtarL2",
        "outputId": "38f265e7-be8b-40fe-8204-f617b22d7649"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/keras/optimizers/optimizer_v2/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super().__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:   1/100 Discriminator Loss: 0.5008 Generator Loss: 4.3341\n",
            "Epoch:   2/100 Discriminator Loss: 0.7685 Generator Loss: 1.9350\n",
            "Epoch:   3/100 Discriminator Loss: 1.0841 Generator Loss: 1.8829\n",
            "Epoch:   4/100 Discriminator Loss: 1.1855 Generator Loss: 1.5762\n",
            "Epoch:   5/100 Discriminator Loss: 0.7846 Generator Loss: 2.0667\n",
            "Epoch:   6/100 Discriminator Loss: 1.5924 Generator Loss: 1.5258\n",
            "Epoch:   7/100 Discriminator Loss: 1.1076 Generator Loss: 1.2032\n",
            "Epoch:   8/100 Discriminator Loss: 1.3179 Generator Loss: 1.6403\n",
            "Epoch:   9/100 Discriminator Loss: 1.3905 Generator Loss: 1.3529\n",
            "Epoch:  10/100 Discriminator Loss: 1.5413 Generator Loss: 1.8261\n",
            "Epoch:  11/100 Discriminator Loss: 1.3693 Generator Loss: 1.5920\n",
            "Epoch:  12/100 Discriminator Loss: 1.6077 Generator Loss: 2.5426\n",
            "Epoch:  13/100 Discriminator Loss: 1.0378 Generator Loss: 1.7161\n",
            "Epoch:  14/100 Discriminator Loss: 1.4894 Generator Loss: 1.6669\n",
            "Epoch:  15/100 Discriminator Loss: 1.4860 Generator Loss: 1.5783\n",
            "Epoch:  16/100 Discriminator Loss: 0.7445 Generator Loss: 2.2874\n",
            "Epoch:  17/100 Discriminator Loss: 1.3180 Generator Loss: 1.6899\n",
            "Epoch:  18/100 Discriminator Loss: 1.3588 Generator Loss: 1.9299\n",
            "Epoch:  19/100 Discriminator Loss: 1.2327 Generator Loss: 1.5936\n",
            "Epoch:  20/100 Discriminator Loss: 1.3723 Generator Loss: 1.3718\n",
            "Epoch:  21/100 Discriminator Loss: 1.1543 Generator Loss: 1.6961\n",
            "Epoch:  22/100 Discriminator Loss: 1.7125 Generator Loss: 1.7749\n",
            "Epoch:  23/100 Discriminator Loss: 1.4143 Generator Loss: 2.1742\n",
            "Epoch:  24/100 Discriminator Loss: 1.2478 Generator Loss: 1.3900\n",
            "Epoch:  25/100 Discriminator Loss: 1.4377 Generator Loss: 1.1027\n",
            "Epoch:  26/100 Discriminator Loss: 0.8865 Generator Loss: 1.7872\n",
            "Epoch:  27/100 Discriminator Loss: 1.1616 Generator Loss: 1.6920\n",
            "Epoch:  28/100 Discriminator Loss: 1.4568 Generator Loss: 1.3711\n",
            "Epoch:  29/100 Discriminator Loss: 1.5285 Generator Loss: 1.4249\n",
            "Epoch:  30/100 Discriminator Loss: 1.1550 Generator Loss: 1.5504\n",
            "Epoch:  31/100 Discriminator Loss: 1.7536 Generator Loss: 0.7338\n",
            "Epoch:  32/100 Discriminator Loss: 1.3166 Generator Loss: 1.3916\n",
            "Epoch:  33/100 Discriminator Loss: 1.2736 Generator Loss: 1.4424\n",
            "Epoch:  34/100 Discriminator Loss: 1.2653 Generator Loss: 1.2278\n",
            "Epoch:  35/100 Discriminator Loss: 1.0375 Generator Loss: 1.8793\n",
            "Epoch:  36/100 Discriminator Loss: 1.2270 Generator Loss: 1.3417\n",
            "Epoch:  37/100 Discriminator Loss: 1.5637 Generator Loss: 1.1751\n",
            "Epoch:  38/100 Discriminator Loss: 1.2349 Generator Loss: 1.2166\n",
            "Epoch:  39/100 Discriminator Loss: 1.8132 Generator Loss: 0.8560\n",
            "Epoch:  40/100 Discriminator Loss: 1.1750 Generator Loss: 1.2459\n",
            "Epoch:  41/100 Discriminator Loss: 1.5506 Generator Loss: 1.3675\n",
            "Epoch:  42/100 Discriminator Loss: 1.0966 Generator Loss: 1.3083\n",
            "Epoch:  43/100 Discriminator Loss: 1.4754 Generator Loss: 1.3229\n",
            "Epoch:  44/100 Discriminator Loss: 0.9376 Generator Loss: 1.3534\n",
            "Epoch:  45/100 Discriminator Loss: 1.1394 Generator Loss: 1.6297\n",
            "Epoch:  46/100 Discriminator Loss: 1.2065 Generator Loss: 1.2491\n",
            "Epoch:  47/100 Discriminator Loss: 1.2367 Generator Loss: 1.2917\n",
            "Epoch:  48/100 Discriminator Loss: 1.1594 Generator Loss: 1.0910\n",
            "Epoch:  49/100 Discriminator Loss: 1.4569 Generator Loss: 1.1189\n",
            "Epoch:  50/100 Discriminator Loss: 1.1314 Generator Loss: 1.0071\n",
            "Epoch:  51/100 Discriminator Loss: 1.4110 Generator Loss: 1.1552\n",
            "Epoch:  52/100 Discriminator Loss: 1.4467 Generator Loss: 0.8243\n",
            "Epoch:  53/100 Discriminator Loss: 1.1210 Generator Loss: 1.1623\n",
            "Epoch:  54/100 Discriminator Loss: 1.1653 Generator Loss: 1.3011\n",
            "Epoch:  55/100 Discriminator Loss: 1.3713 Generator Loss: 1.2346\n",
            "Epoch:  56/100 Discriminator Loss: 1.6145 Generator Loss: 0.9665\n",
            "Epoch:  57/100 Discriminator Loss: 1.4653 Generator Loss: 0.9780\n",
            "Epoch:  58/100 Discriminator Loss: 1.3185 Generator Loss: 0.8840\n",
            "Epoch:  59/100 Discriminator Loss: 1.5107 Generator Loss: 1.0400\n",
            "Epoch:  60/100 Discriminator Loss: 1.3922 Generator Loss: 1.1727\n",
            "Epoch:  61/100 Discriminator Loss: 1.1658 Generator Loss: 1.3107\n",
            "Epoch:  62/100 Discriminator Loss: 1.5153 Generator Loss: 1.1046\n",
            "Epoch:  63/100 Discriminator Loss: 1.4825 Generator Loss: 1.1943\n",
            "Epoch:  64/100 Discriminator Loss: 1.2445 Generator Loss: 1.3199\n",
            "Epoch:  65/100 Discriminator Loss: 1.2103 Generator Loss: 0.9762\n",
            "Epoch:  66/100 Discriminator Loss: 1.3093 Generator Loss: 0.9913\n",
            "Epoch:  67/100 Discriminator Loss: 1.4987 Generator Loss: 0.8905\n",
            "Epoch:  68/100 Discriminator Loss: 1.5823 Generator Loss: 0.8937\n",
            "Epoch:  69/100 Discriminator Loss: 1.0727 Generator Loss: 1.2755\n",
            "Epoch:  70/100 Discriminator Loss: 1.1361 Generator Loss: 1.0839\n",
            "Epoch:  71/100 Discriminator Loss: 1.3802 Generator Loss: 1.1628\n",
            "Epoch:  72/100 Discriminator Loss: 1.4479 Generator Loss: 1.0222\n",
            "Epoch:  73/100 Discriminator Loss: 1.1103 Generator Loss: 1.2143\n",
            "Epoch:  74/100 Discriminator Loss: 1.3639 Generator Loss: 1.1736\n",
            "Epoch:  75/100 Discriminator Loss: 1.4299 Generator Loss: 1.2991\n",
            "Epoch:  76/100 Discriminator Loss: 1.3275 Generator Loss: 0.8336\n",
            "Epoch:  77/100 Discriminator Loss: 1.2236 Generator Loss: 1.0783\n",
            "Epoch:  78/100 Discriminator Loss: 1.2922 Generator Loss: 1.3693\n",
            "Epoch:  79/100 Discriminator Loss: 1.3002 Generator Loss: 1.0407\n",
            "Epoch:  80/100 Discriminator Loss: 1.0879 Generator Loss: 1.2953\n",
            "Epoch:  81/100 Discriminator Loss: 1.1039 Generator Loss: 1.1477\n",
            "Epoch:  82/100 Discriminator Loss: 1.2725 Generator Loss: 1.2326\n",
            "Epoch:  83/100 Discriminator Loss: 1.2300 Generator Loss: 1.4737\n",
            "Epoch:  84/100 Discriminator Loss: 1.5946 Generator Loss: 0.7619\n",
            "Epoch:  85/100 Discriminator Loss: 1.4127 Generator Loss: 0.8844\n",
            "Epoch:  86/100 Discriminator Loss: 1.3000 Generator Loss: 1.0759\n",
            "Epoch:  87/100 Discriminator Loss: 1.6724 Generator Loss: 0.9100\n",
            "Epoch:  88/100 Discriminator Loss: 1.3695 Generator Loss: 1.0230\n",
            "Epoch:  89/100 Discriminator Loss: 1.2186 Generator Loss: 1.0962\n",
            "Epoch:  90/100 Discriminator Loss: 1.5132 Generator Loss: 0.9380\n",
            "Epoch:  91/100 Discriminator Loss: 1.1291 Generator Loss: 1.2602\n",
            "Epoch:  92/100 Discriminator Loss: 1.3490 Generator Loss: 0.9554\n",
            "Epoch:  93/100 Discriminator Loss: 1.3386 Generator Loss: 1.0575\n",
            "Epoch:  94/100 Discriminator Loss: 1.3512 Generator Loss: 1.0064\n",
            "Epoch:  95/100 Discriminator Loss: 1.4129 Generator Loss: 1.0565\n",
            "Epoch:  96/100 Discriminator Loss: 1.3184 Generator Loss: 1.1226\n",
            "Epoch:  97/100 Discriminator Loss: 1.7134 Generator Loss: 0.9133\n"
          ]
        }
      ],
      "source": [
        "from keras.layers import Flatten\n",
        "\n",
        "# hyperparameters\n",
        "sample_size     = 100     # latent sample size (100 random numbers)\n",
        "g_hidden_size   = 128\n",
        "d_hidden_size   = 128\n",
        "leaky_alpha     = 0.05    # for leaky ReLU\n",
        "g_learning_rate = 0.0001  # learning rate for the generator\n",
        "d_learning_rate = 0.001   # learning rate for the discriminator\n",
        "epochs          = 100     # number of times to run the model\n",
        "batch_size      = 64      # training batch size\n",
        "eval_size       = 16      # evaluate size\n",
        "smooth          = 0.1\n",
        "\n",
        "# labels for the batch size and the test size\n",
        "y_train_real, y_train_fake = make_labels(batch_size)\n",
        "y_eval_real,  y_eval_fake  = make_labels(eval_size)\n",
        "\n",
        "# create GAN, generator and discriminator\n",
        "gan, generator, discriminator = make_simple_GAN(\n",
        "    sample_size, \n",
        "    g_hidden_size, \n",
        "    d_hidden_size, \n",
        "    leaky_alpha, \n",
        "    g_learning_rate,\n",
        "    d_learning_rate)\n",
        "\n",
        "losses = []\n",
        "for e in range(epochs):\n",
        "    for i in range(len(X_train_real)//batch_size):\n",
        "        # real MNIST digit images\n",
        "        X_batch_real = X_train_real[i*batch_size:(i+1)*batch_size]\n",
        "        \n",
        "        # latent samples and the generated digit images\n",
        "        latent_samples = make_latent_samples(batch_size, sample_size)\n",
        "        X_batch_fake = generator.predict_on_batch(latent_samples)\n",
        "        \n",
        "        # train the discriminator to detect real and fake images\n",
        "        make_trainable(discriminator, True)\n",
        "        discriminator.train_on_batch(X_batch_real, y_train_real * (1 - smooth))\n",
        "        discriminator.train_on_batch(X_batch_fake, y_train_fake)\n",
        "\n",
        "        # train the generator via GAN\n",
        "        make_trainable(discriminator, False)\n",
        "        gan.train_on_batch(latent_samples, y_train_real)\n",
        "    \n",
        "    # evaluate\n",
        "    X_eval_real = X_test_real[np.random.choice(len(X_test_real), eval_size, replace=False)]\n",
        "    \n",
        "    latent_samples = make_latent_samples(eval_size, sample_size)\n",
        "    X_eval_fake = generator.predict_on_batch(latent_samples)\n",
        "\n",
        "    d_loss  = discriminator.test_on_batch(X_eval_real, y_eval_real)\n",
        "    d_loss += discriminator.test_on_batch(X_eval_fake, y_eval_fake)\n",
        "    g_loss  = gan.test_on_batch(latent_samples, y_eval_real) \n",
        "    \n",
        "    losses.append((d_loss, g_loss))\n",
        "    \n",
        "    print(\"Epoch: {:>3}/{} Discriminator Loss: {:>6.4f} Generator Loss: {:>6.4f}\".format(\n",
        "        e+1, epochs, d_loss, g_loss))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Plot the generator and discriminator loss\n",
        "\n",
        "The generator tries to increase the discriminator loss and the discriminator tries to increase the generator loss. \\\n",
        "As the generator loss decreases, the discriminator loss should increase as we see in the graph. It means that the images are more realistic and the discriminator is not being able to distinguish real images from fake images as easiliy as it could do earlier. \\\n",
        "We want both the generator loss and the discriminator loss to be as low as possible. \\\n",
        "We can check these values by playing with the hyperparameters, like increasing the number of epochs or having different values of learning rates. We can also try to add more layers to the network to see if it improves our losses and the images.  "
      ],
      "metadata": {
        "id": "zGowax0xqrA1"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "ceJL1o4jazl-",
        "outputId": "c71b7492-3e2a-4245-b304-1458ac2a12ad"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "losses = np.array(losses)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "plt.plot(losses.T[0], label='Discriminator')\n",
        "plt.plot(losses.T[1], label='Generator')\n",
        "plt.title(\"Training Losses\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plot the fake images generated by the generator\n",
        " Here we try to see what kind of hand written digit images our generator is able to plot."
      ],
      "metadata": {
        "id": "87GUKycYrzuz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "R1WIzvtMa0og",
        "outputId": "0f677809-8ef6-4f7c-dd0d-a04816968c96"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 237ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "latent_samples = make_latent_samples(20, sample_size)\n",
        "generated_digits = generator.predict(latent_samples)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "for i in range(20):\n",
        "    img = deprocess(generated_digits[i])\n",
        "    plt.subplot(4, 5, i+1)\n",
        "    plt.imshow(img, cmap='gray')\n",
        "    plt.xticks([])\n",
        "    plt.yticks([])\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
